name: Rust

on:
  push:
    branches: [main, release/**]
  pull_request:
  merge_group:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref_protected == 'true' && github.sha || github.ref }}-{{ github.event_name }}
  cancel-in-progress: true

env:
  ARTIFACT_RETENTION_DAYS_FOR_TEST_WASMS: 7

defaults:
  run:
    shell: bash

jobs:

  complete:
    if: always()
    needs: [fmt, check-git-rev-deps, semver-checks, build-and-test, build-fuzz, docs, readme, migration-docs]
    runs-on: ubuntu-latest
    steps:
    - if: contains(needs.*.result, 'failure') || contains(needs.*.result, 'cancelled')
      run: exit 1

  fmt:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - run: cargo fmt --all --check

  cargo-deny:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        checks:
          - advisories
          - bans licenses sources
    # Prevent sudden announcement of a new advisory from failing ci:
    continue-on-error: ${{ matrix.checks == 'advisories' }}
    steps:
    - uses: actions/checkout@v3
    - uses: EmbarkStudios/cargo-deny-action@b01e7a8cfb1f496c52d77361e84c1840d8246393
      with:
        command: check ${{ matrix.checks }}

  check-git-rev-deps:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-check-git-rev-deps@main

  semver-checks:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: rustup update
    - uses: stellar/binaries@v45
      with:
        name: cargo-semver-checks
        version: 0.44.0
    - run: >
        cargo semver-checks
        --exclude soroban-meta
        --exclude soroban-token-spec
        --exclude stellar-asset-spec

  build-and-test:
    strategy:
      fail-fast: false
      matrix:
        sys:
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
        - os: ubuntu-24.04-arm
          target: aarch64-unknown-linux-gnu
        - os: macos-15-intel
          target: x86_64-apple-darwin
        - os: macos-latest
          target: aarch64-apple-darwin
        - os: windows-latest
          target: x86_64-pc-windows-msvc
    runs-on: ${{ matrix.sys.os }}
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - name: Install msrv
      run: |
        msrv="$(make msrv)"
        rustup install $msrv
        rustup target add --toolchain $msrv ${{ matrix.sys.target }}
        rustup target add --toolchain $msrv wasm32v1-none
    - name: Install latest
      run: |
        rustup update
        rustup target add ${{ matrix.sys.target }}
        rustup target add wasm32v1-none
    - run: echo CARGO_BUILD_TARGET='${{ matrix.sys.target }}' >> $GITHUB_ENV
    - uses: stellar/binaries@v45
      with:
        name: cargo-hack
        version: 0.5.28
    # Build with latest Rust
    - run: make build-libs
    - run: make build-test-wasms
    # Build with MSRV Rust
    - run: make build-libs RUST=msrv
    - run: make build-test-wasms RUST=msrv
    # Run tests with latest
    - run: rm -fr **/test_snapshots
    - run: make test
    - run: git add -N . && git diff HEAD --exit-code
    # Run tests with MSRV
    - run: rm -fr **/test_snapshots
    - run: make test RUST=msrv
    - run: git add -N . && git diff HEAD --exit-code

  build-fuzz:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - run: rustup install nightly
    - uses: stellar/binaries@v45
      with:
        name: cargo-fuzz
        version: 0.13.1
    - run: make build-fuzz
    - name: Check no diffs exist
      run: git add -N . && git diff HEAD --exit-code

  docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - run: rustup install nightly
    - run: make doc
    - name: Check no diffs exist
      run: git add -N . && git diff HEAD --exit-code

  readme:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - run: rustup install nightly
    - run: make readme
    - run: git add -N . && git diff HEAD --exit-code

  migration-docs:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: stellar/actions/rust-cache@main
    - run: rustup update
    - run: |
        version="$(cargo metadata --format-version 1 --no-deps | jq -r '.packages[] | select(.name == "soroban-sdk") | .version | split("\\.";"")[0] | "v"+.')"
        git grep "${version}" -- soroban-sdk/src/_migrating.rs \
          || (echo "The _migrating ${version} section is missing." && exit 1)

  publish-dry-run:
    if: github.event_name == 'push' || startsWith(github.head_ref, 'release/')
    strategy:
      matrix:
        sys:
        - os: ubuntu-latest
          target: wasm32v1-none
          cargo-hack-feature-options: --manifest-path Cargo.toml --exclude soroban-meta --exclude soroban-spec --exclude soroban-spec-rust --exclude soroban-ledger-snapshot --exclude-features testutils,docs,default,std --feature-powerset
        - os: ubuntu-latest
          target: x86_64-unknown-linux-gnu
          cargo-hack-feature-options: '--feature-powerset --exclude-features docs'
    uses: stellar/actions/.github/workflows/rust-publish-dry-run.yml@main
    with:
      runs-on: ${{ matrix.sys.os }}
      target: ${{ matrix.sys.target }}
      cargo-hack-feature-options: ${{ matrix.sys.cargo-hack-feature-options }}
